using Butterfly.Communication.Packets.Outgoing.Structure;using Butterfly.Database.Interfaces;using Butterfly.HabboHotel.GameClients;using Butterfly.HabboHotel.Rooms;namespace Butterfly.Communication.Packets.Incoming.Structure{    class GiveRoomScoreEvent : IPacketEvent    {        public void Parse(GameClient Session, ClientPacket Packet)        {            if (Session.GetHabbo() == null)
                return;

            Room room = ButterflyEnvironment.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);            if (room == null || Session.GetHabbo().RatedRooms.Contains(room.Id) || room.CheckRights(Session, true))                return;            switch (Packet.PopInt())            {                case -1:                    room.RoomData.Score--;                    break;                case 0:                    return;                case 1:                    room.RoomData.Score++;                    break;                default:                    return;            }            //ButterflyEnvironment.GetGame().GetRoomManager().QueueVoteAdd(room.RoomData);            using (IQueryAdapter queryreactor = ButterflyEnvironment.GetDatabaseManager().GetQueryReactor())                queryreactor.RunQuery(string.Concat(new object[4]                {                   "UPDATE rooms SET score = ",                   room.RoomData.Score,                   " WHERE id = ",                   room.Id                }));            Session.GetHabbo().RatedRooms.Add(room.Id);            Session.SendPacket(new RoomRatingComposer(room.RoomData.Score, !(Session.GetHabbo().RatedRooms.Contains(room.Id) || room.RoomData.OwnerId == Session.GetHabbo().Id)));        }    }}